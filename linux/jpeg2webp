#!/bin/bash

VERSION="v1.1.6"

## CHECKING IF WSL (needs a XForm server to run Zenity)
if grep -q Microsoft /proc/version; then
    while :
    do
        clear
        printf "\e[31mYou are running this program under a Windows Subsystem for Linux.\e[0m\n\n"
        printf "In order to work, make sure you have a XForm server installed to run GTK applications. During development, it was tested successfully with Xming, which you can download at https://www.straightrunning.com/XmingNotes/.\n"
        printf "Press any key to continue...\n"
        read -t 30 -n 1
        if [ $? = 0 ]; then
            break
        fi
    done
    export DISPLAY=:0
fi

# pragma SPINNER.SH
# Author: Tasos Latsas

function _spinner() {
    local green="\e[32m"
    local red="\e[31m"
    local nc="\e[0m"

    case $1 in
        start)
            # calculate the column where spinner and status msg will be displayed
            column=$(($(tput cols)-${#2}-8))
            # display message and position the cursor in $column column
            printf "%b" "${2}"
            printf "%${column}s"

            # start spinner
            i=1
            sp='\|/-'
            delay=${SPINNER_DELAY:-0.15}

            while :
            do
                printf "\b%b" "${sp:i++%${#sp}:1}"
                sleep "$delay"
            done
            ;;
        stop)
            if [[ -z ${3} ]]; then
                printf "Spinner is not running.\n"
                exit 1
            fi

            kill "$3" > /dev/null 2>&1

            # inform the user uppon success or failure
            printf "\n["
            if [[ $2 -eq 0 ]]; then
                printf "%bDONE%b" "${green}" "${nc}"
            else
                printf "%bFAIL%b" "${red}" "${nc}"
            fi
            printf "]\n"
            ;;
        *)
            echo "Invalid argument, try {start/stop}"
            exit 1
            ;;
    esac
}

function start_spinner {
    # $1 : msg to display
    _spinner "start" "${1}" &
    # set global spinner pid
    _sp_pid=$!
    disown
}

function stop_spinner {
    # $1 : command exit status
    _spinner "stop" "$1" $_sp_pid
    unset _sp_pid
    sleep 1
}

# pragma MAIN PROGRAM
# Copyright (c) 2021 Alexandre Moreau-Lemay
# Author : Alexandre Moreau-Lemay
# License : AGPL-3.0 License

bold=$(tput bold)
normal=$(tput sgr0)
green="\e[32m"
red="\e[31m"
nc="\e[0m"

clear
printf "%bBatch WebP converter %s - Linux (debian-like)%b\n" "$bold" "$VERSION" "$normal"
printf "Copyright (c) Alexandre Moreau-Lemay 2021.\n"
printf "Released under the AGPLv3 License.\n\n\n"
sleep 1

# pragma OS DETECTION
if [[ "$OSTYPE" != "linux-gnu" ]]; then
    printf "\e[31mSorry, this script is only compatible with Linux operating systems.\e[0m\n\n"
    exit 1
fi

# pragma DEPENDENCIES
# pragma 1. ImageMagick
start_spinner "1. Making sure ImageMagick is installed."
if ! dpkg -l | grep imagemagick > /dev/null; then
    printf "\n    ImageMagick is not installed. To install it, please enter your password if required."
    sudo apt update
    sudo apt install imagemagick
fi
stop_spinner $?

# pragma 2. coreutils
start_spinner "2. Making sure coreutils is installed."
if ! dpkg -l | grep coreutils > /dev/null; then
    printf "\n    Coreutils is not installed. To install it, please enter your password if required.\n"
    sudo apt-get update -y
    sudo apt-get install -y coreutils
fi
stop_spinner $?

# pragma 3. Zenity
start_spinner "3. Making sure Zenity is installed."
if ! dpkg -l | grep zenity > /dev/null; then
    printf "\n    Zenity is not installed. To install it, please enter your password if required.\n"
    sudo apt-get update -y
    sudo apt-get install -y zenity
fi
stop_spinner $?

# pragma FILE MANIPULATION
# pragma 4. Getting the path of the conversion
if [ $# -eq 0 ]; then
    path=$(zenity --file-selection --directory)
else
    path="$1"
fi

# pragma 5. Check if the directory exists and move to the directory if it does
if [ ! -d "$path" ]; then
    printf "\e[31mThe path is invalid!\e[0m\n"
    exit 1
else
    cd "$path" || exit
fi

# pragma 6. Infos about the album
printf "Enter the name of the album: "
read -r ALBUM_NAME

printf "Enter a description for the album: "
read -r ALBUM_DESCRIPTION

until ! [[ "$ALBUM_YEAR" -eq 0 ]]
do
    printf "Enter the year of the album: "
    read -r ALBUM_YEAR_TEMP
    if ! [[ "$ALBUM_YEAR_TEMP" =~ ^-?[0-9]+$ ]]; then
        printf "%bPlease enter a numerical value!%b\n" "$red" "$nc"
    else
        ALBUM_YEAR="$ALBUM_YEAR_TEMP"
    fi
done

printf "Enter the city of the album: "
read -r ALBUM_CITY

printf "Enter the country of the album: "
read -r ALBUM_COUNTRY

# pragma 7. Select the album cover
function album_cover() {
    COVER_FILE_NAME=$(basename "$(zenity --file-selection --file-filter="Images | *.jpg *.jpeg")")
}

function random_album_cover() {
    COVER_FILE_NAME=$(find . -maxdepth 1 -type f | shuf -n 1 | cut -c 3-)
}

while :
do
    printf "Do you wish to set a cover image for the album? If none is set, it will be randomly generated. [y/n] : "
    read -r _SET_ALBUM_COVER
    SET_ALBUM_COVER_LOWER=$(tr '[:upper:]' '[:lower:]' <<< "$_SET_ALBUM_COVER")
    case "$SET_ALBUM_COVER_LOWER" in
        "y")
            album_cover
            break
            ;;
        "n")
            random_album_cover
            break
            ;;
        *)
            printf "Invalid input! Please try again.\n"
            ;;
    esac
done

# pragma 8. Making the base of the json file
touch album.json
{
    printf "{\n"
    printf "    \"name\":\"%s\",\n" "$ALBUM_NAME"
    printf "    \"description\":\"%s\",\n" "$ALBUM_DESCRIPTION"
    printf "    \"year\":%s,\n" "$ALBUM_YEAR"
    printf "    \"city\":\"%s\",\n" "$ALBUM_CITY"
    printf "    \"country\":\"%s\",\n" "$ALBUM_COUNTRY"
    printf "    \"pictures\":[\n"
} >> album.json

# pragma 9. Making the two permanent directories and one temporary one
TEMP=$(uuidgen)
mkdir -p webp
mkdir -p jpeg
mkdir -p originals
mkdir "$TEMP"

# pragma 10. Executing the conversion script
mv -n ./*.jpg "$TEMP"/
mv -n ./*.jpeg "$TEMP"/ 2>/dev/null
cd "$TEMP"/ || exit

start_spinner 'Resizing files...'
for FILE in *
do
    if [ -f "$FILE" ];then
        ID=$(uuidgen)
        EXTENSION=${FILE#*.}
        if [ "$FILE" = "$COVER_FILE_NAME" ]; then
            COVER_ID="$ID"
        fi
        mv "$FILE" "$ID"."$EXTENSION"
        NEW_FILE="$ID"."$EXTENSION"
        printf "        \"%s\",\n" "$ID" >> ../album.json
        # JPEG resizing
        convert "$NEW_FILE" -resize 2000x2000\> -strip -interlace Plane -gaussian-blur 0.05 -quality 80% -density 72 "$ID-2000.$EXTENSION"
        convert "$ID-2000.$EXTENSION" -resize 1500x1500\> "$ID-1500.$EXTENSION"
        convert "$ID-1500.$EXTENSION" -resize 1000x1000\> "$ID-1000.$EXTENSION"
        convert "$ID-1000.$EXTENSION" -resize 500x500\> "$ID-500.$EXTENSION"

        # WebP conversion
        convert "$ID-2000.$EXTENSION" -define webp:emulate-jpeg-size=true "$ID-2000.webp"
        convert "$ID-1500.$EXTENSION" -define webp:emulate-jpeg-size=true "$ID-1500.webp"
        convert "$ID-1000.$EXTENSION" -define webp:emulate-jpeg-size=true "$ID-1000.webp"
        convert "$ID-500.$EXTENSION" -define webp:emulate-jpeg-size=true "$ID-500.webp"

        mv -n "$NEW_FILE" ../originals/
    fi
done
stop_spinner $?

# pragma 11. Closing the album.json file and removing the last comma and line break from the loop
if [ -n "$(tail -c1 ../album.json)" ]; then
    # If the file has not a trailing new line.
    # Remove one char as the question request.
    truncate -s-1 ../album.json           
else
    # Remove the last two characters.
    truncate -s-2 ../album.json
    # Add the trailing new line back.
    echo "" >> ../album.json
fi

{
    printf "    ],\n"
    printf "    \"cover\":\"%s\",\n" "$COVER_ID"
    printf "    \"sizes\":[\n"
    printf "        500,\n"
    printf "        1000,\n"
    printf "        1500,\n"
    printf "        2000\n"
    printf "    ]\n"
    printf "}"
} >> ../album.json

# pragma 12. Copying the files in their right directories
start_spinner 'Copying files...'
mv -n ./*.jpg ../jpeg/
mv -n ./*.jpeg ../jpeg/ 2>/dev/null
mv -n ./*.webp ../webp/
stop_spinner $?

# pragma 13. Removing the temporary directory

# Added a sleep 5 because without it the script sometimes causes an issue where the temporary directory would not be deleted.
sleep 5

cd ../
rm -r ./"$TEMP"

# pragma 14. Exiting the script
clear
printf "\033[0;32mScript has executed!\e[0m\n"
exit 0
