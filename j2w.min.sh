function _spinner(){ local on_success="DONE";local on_fail="FAIL";local green="\e[32m";local red="\e[31m";local nc="\e[0m";case $1 in start);column=$(($(tput cols)-${#2}-8));echo -ne "${2}";printf "%${column}s";i=1;sp='\|/-';delay=${SPINNER_DELAY:-0.15};while :;do printf "\b%b" "${sp:i++%${#sp}:1}";sleep "$delay";done;;;stop);if [[ -z ${3} ]];then echo "spinner is not running..";exit 1;fi;kill "$3">/dev/null 2>&1;if [[ $2 -eq 0 ]];then printf "${green}%s${nc}" "${on_success}";else printf "${red}%s${nc}" "${on_fail}";fi;printf "]\n";;;*);echo "invalid argument, try {start/stop}";exit 1;;;esac;};function start_spinner { _spinner "start" "${1}"&;_sp_pid=$!;disown;};function stop_spinner { _spinner "stop" "$1" $_sp_pid;unset _sp_pid;};clear;printf "This program will convert jpeg in a provided directory to webp, then make two directories (if they don't already exist) - jpeg and webp - and move the files according to their extensions.\n";start_spinner "1. Making sure HomeBrew is installed.";which -s brew;if ! which -s brew;then ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)";else brew update;brew upgrade;fi;stop_spinner $?;start_spinner "2. Making sure ImageMagick is installed.";if brew ls --versions imagemagick>/dev/null;then printf "\e[32m    ImageMagick is installed.\n\e[39m";else brew install imagemagick;fi;stop_spinner $?;start_spinner "3. Making sure coreutils is installed.";if brew ls --versions coreutils>/dev/null;then printf "\e[32m    coreutils is installed.\n\e[39m";else brew install coreutils;fi;stop_spinner $?;start_spinner "4. Making sure NodeJS is installed.";if which node>/dev/null;then printf "\e[32m    NodeJS is installed, going to the next step.\n\e[39m";else printf "\e[31m    You first need to install NodeJS.\n\e[39m";brew install node;fi;stop_spinner $?;printf "5. Making sure the npm dependecies are installed, and installing them if not. This step might require administrative priviledges (enter your password if requested).\n";npm list -g|grep webp-converter-cli||sudo npm install -g webp-converter-cli;if [ $# -eq 0 ];then printf "6. Please enter the path for the directory with the files.\n";read -r path;else path="$1";fi;if [ ! -d "$path" ];then printf "\e[31mThe path is invalid!\n";exit 1;else cd "$path"||exit;fi;printf "Enter the name of the album: ";read -r ALBUM_NAME;printf "Enter a description for the album: ";read -r ALBUM_DESCRIPTION;printf "Enter the year of the album: ";read -r ALBUM_YEAR;printf "Enter the city of the album: ";read -r ALBUM_CITY;printf "Enter the country of the album: ";read -r ALBUM_COUNTRY;function album_cover(){ TEMP=true;while "$TEMP";do printf "Please provide the name of the file (including the extension) : ";read -r COVER_FILE_NAME;if [ ! -f "$COVER_FILE_NAME" ];then printf "Error: The file name provided does not exist. Would you like to try again? [y/n] : ";read -r ALBUM_COVER_TRY_AGAIN;if [ "$ALBUM_COVER_TRY_AGAIN" = "n" ]||[ "$ALBUM_COVER_TRY_AGAIN" = "N" ];then printf "The program will therefore choose a random file.\n";random_album_cover;TEMP=false;fi;else TEMP=false;fi;done;};function random_album_cover(){ COVER_FILE_NAME=$(find . -maxdepth 1|gshuf -n 1|cut -c 3-);};TEMP_T=true;while "$TEMP_T";do printf "Do you wish to set a cover image for the album? If none is set, it will be randomly generated. [y/n] : ";read -r _SET_ALBUM_COVER;case "$_SET_ALBUM_COVER" in "y");album_cover;TEMP_T=false;;;"Y");album_cover;TEMP_T=false;;;"n");random_album_cover;TEMP_T=false;;;"N");random_album_cover;TEMP_T=false;;;*);printf "Invalid input! Please try again.\n";;;esac;done;touch album.json { printf "{\n";printf "    \"name\":\"%s\",\n" "$ALBUM_NAME";printf "    \"description\":\"%s\",\n" "$ALBUM_DESCRIPTION";printf "    \"year\":%s,\n" "$ALBUM_YEAR";printf "    \"city\":\"%s\",\n" "$ALBUM_CITY";printf "    \"country\":\"%s\",\n" "$ALBUM_COUNTRY";printf "    \"pictures\":[\n";}>>album.json;TEMP=$(uuidgen);mkdir -p webp;mkdir -p jpeg;mkdir -p originals;mkdir "$TEMP";mv -n ./*.jpg "$TEMP"/;mv -n ./*.jpeg "$TEMP"/ 2>/dev/null;cd "$TEMP"/||exit;start_spinner 'Resizing files...';for FILE in *;do if [ -f "$FILE" ];then ID=$(uuidgen);EXTENSION=${FILE#*.};if [ "$FILE" = "$COVER_FILE_NAME" ];then COVER_ID="$ID";fi;mv "$FILE" "$ID"."$EXTENSION";NEW_FILE="$ID"."$EXTENSION";printf "        \"%s\",\n" "$ID">>../album.json;convert "$NEW_FILE" -resize 2000x2000\> -strip -interlace Plane -gaussian-blur 0.05 -quality 80% -density 72 "$ID-2000.$EXTENSION";convert "$NEW_FILE" -resize 1500x1500\> -strip -interlace Plane -gaussian-blur 0.05 -quality 80% -density 72 "$ID-1500.$EXTENSION";convert "$NEW_FILE" -resize 1000x1000\> -strip -interlace Plane -gaussian-blur 0.05 -quality 80% -density 72 "$ID-1000.$EXTENSION";convert "$NEW_FILE" -resize 500x500\> -strip -interlace Plane -gaussian-blur 0.05 -quality 80% -density 72 "$ID-500.$EXTENSION";mv -n "$NEW_FILE" ../originals/;fi;done;stop_spinner $?;if [ -n "$(tail -c1 ../album.json)" ];then gtruncate -s-1 ../album.json;else gtruncate -s-2 ../album.json;echo "">>../album.json;fi { printf "    ],\n";printf "    \"cover\":\"%s\",\n" "$COVER_ID";printf "    \"sizes\":[\n";printf "        500,\n";printf "        1000,\n";printf "        1500,\n";printf "        2000\n";printf "    ]\n";printf "}";}>>../album.json;webpc -r;start_spinner 'Copying files...';mv -n ./*.jpg ../jpeg/;mv -n ./*.jpeg ../jpeg/ 2>/dev/null;mv -n ./*.webp ../webp/;stop_spinner $?;sleep 5;cd ../;rm -r ./"$TEMP";clear;printf "\033[0;32mScript has executed!\n";exit 0
